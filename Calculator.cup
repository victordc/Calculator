package Calculator;

import java_cup.runtime.*;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal SEMI, PLUS, MINUS, NOT, TIMES, MOD, DIVIDE, LSHIFT, RSHIFT, LPAREN, RPAREN;
terminal AND, XOR, OR, POW, SQRT, LOG, SIN, COS, TAN, COT, SEC, CSC;
terminal Long LONG;
terminal Double DOUBLE;

non terminal expr_list, expr_part, exprd_part;
non terminal Long expr;
non terminal Double exprd;

precedence left PLUS, MINUS;
precedence right NOT;
precedence left TIMES, DIVIDE, MOD;
precedence left LSHIFT, RSHIFT;
precedence left AND, XOR, OR;
precedence left POW, SQRT, LOG, SIN, COS, TAN, COT, SEC, CSC;

expr_list ::= expr_list expr_part | expr_list exprd_part | expr_part | exprd_part;
expr_part ::= expr:e {: System.out.println(" = "+e+";"); :} SEMI;
exprd_part ::= exprd:e {: System.out.println(" = "+e+";"); :} SEMI;
exprd     ::= DOUBLE:n
	      {: RESULT=n; :}
            | MINUS exprd:r
	      {: RESULT=new Double(0 - r.doubleValue()); :}
            | exprd:l PLUS exprd:r 
	      {: RESULT=new Double(l.doubleValue() + r.doubleValue()); :}
            | expr:l PLUS exprd:r 
	      {: RESULT=new Double(l.doubleValue() + r.doubleValue()); :}
            | exprd:l PLUS expr:r
	      {: RESULT=new Double(l.doubleValue() + r.doubleValue()); :}
            | exprd:l MINUS exprd:r 
	      {: RESULT=new Double(l.doubleValue() - r.doubleValue()); :}
            | expr:l MINUS exprd:r 
	      {: RESULT=new Double(l.doubleValue() - r.doubleValue()); :}
            | exprd:l MINUS expr:r
	      {: RESULT=new Double(l.doubleValue() - r.doubleValue()); :}
	    | exprd:l TIMES exprd:r 
	      {: RESULT=new Double(l.doubleValue() * r.doubleValue()); :}
	    | expr:l TIMES exprd:r 
	      {: RESULT=new Double(l.doubleValue() * r.doubleValue()); :}
	    | exprd:l TIMES expr:r
	      {: RESULT=new Double(l.doubleValue() * r.doubleValue()); :}
	    | exprd:l DIVIDE exprd:r 
	      {: RESULT=new Double(l.doubleValue() / r.doubleValue()); :}
	    | expr:l DIVIDE exprd:r 
	      {: RESULT=new Double(l.doubleValue() / r.doubleValue()); :}
	    | exprd:l DIVIDE expr:r
	      {: RESULT=new Double(l.doubleValue() / r.doubleValue()); :}
	    | exprd:l POW exprd:r 
	      {: RESULT=new Double((double)Math.pow(l.doubleValue(),r.doubleValue())); :}
	    | expr:l POW exprd:r 
	      {: RESULT=new Double((double)Math.pow(l.doubleValue(),r.doubleValue())); :}
	    | exprd:l POW expr:r
	      {: RESULT=new Double((double)Math.pow(l.doubleValue(),r.doubleValue())); :}
            | SQRT expr:r
	      {: RESULT=new Double((double)Math.sqrt(r.doubleValue())); :}
            | SQRT exprd:r
	      {: RESULT=new Double((double)Math.sqrt(r.doubleValue())); :}
            | LOG expr:r
	      {: RESULT=new Double((double)Math.log(r.doubleValue())); :}
            | LOG exprd:r
	      {: RESULT=new Double((double)Math.log(r.doubleValue())); :}
            | SIN expr:r
	      {: RESULT=new Double((double)Math.sin(r.doubleValue())); :}
            | SIN exprd:r
	      {: RESULT=new Double((double)Math.sin(r.doubleValue())); :}
            | COS expr:r
	      {: RESULT=new Double((double)Math.cos(r.doubleValue())); :}
            | COS exprd:r
	      {: RESULT=new Double((double)Math.cos(r.doubleValue())); :}
            | TAN expr:r
	      {: RESULT=new Double((double)Math.tan(r.doubleValue())); :}
            | TAN exprd:r
	      {: RESULT=new Double((double)Math.tan(r.doubleValue())); :}
            | COT expr:r
	      {: RESULT=new Double(1/Math.tan(r.doubleValue())); :}
            | COT exprd:r
	      {: RESULT=new Double(1/Math.tan(r.doubleValue())); :}
            | SEC expr:r
	      {: RESULT=new Double(1/Math.cos(r.doubleValue())); :}
            | SEC exprd:r
	      {: RESULT=new Double(1/Math.cos(r.doubleValue())); :}
            | CSC expr:r
	      {: RESULT=new Double(1/Math.sin(r.doubleValue())); :}
            | CSC exprd:r
	      {: RESULT=new Double(1/Math.sin(r.doubleValue())); :}
	    | LPAREN exprd:e RPAREN
	      {: RESULT=e; :}
	    ;
expr      ::= LONG:n
	      {: RESULT=n; :}
            | MINUS expr:r
	      {: RESULT=new Long(0 - r.longValue()); :}
            | expr:l PLUS expr:r
	      {: RESULT=new Long(l.longValue() + r.longValue()); :}
            | expr:l MINUS expr:r
	      {: RESULT=new Long(l.longValue() - r.longValue()); :}
            | NOT expr:r
	      {: RESULT=new Long(~ r.longValue()); :}
	    | expr:l TIMES expr:r
	      {: RESULT=new Long(l.longValue() * r.longValue()); :}
	    | expr:l DIVIDE expr:r
	      {: RESULT=new Long(l.longValue() / r.longValue()); :}
	    | expr:l MOD expr:r
	      {: RESULT=new Long(l.longValue() % r.longValue()); :}
	    | expr:l LSHIFT expr:r
	      {: RESULT=new Long(l.longValue() << r.longValue()); :}
	    | expr:l RSHIFT expr:r
	      {: RESULT=new Long(l.longValue() >> r.longValue()); :}
	    | expr:l AND expr:r
	      {: RESULT=new Long(l.longValue() & r.longValue()); :}
	    | expr:l XOR expr:r
	      {: RESULT=new Long(l.longValue() ^ r.longValue()); :}
	    | expr:l OR expr:r
	      {: RESULT=new Long(l.longValue() | r.longValue()); :}
	    | expr:l POW expr:r
	      {: RESULT=new Long((long)Math.pow(l.longValue(),r.longValue())); :}
	    | LPAREN expr:e RPAREN
	      {: RESULT=e; :}
	    ;
