package Calculator;

import java_cup.runtime.*;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal SEMI, PLUS, MINUS, NOT, TIMES, MOD, DIVIDE, LSHIFT, RSHIFT, AND, XOR, OR, POW, LPAREN, RPAREN;
terminal Integer NUMBER;

non terminal expr_list, expr_part;
non terminal Integer expr;

precedence left PLUS, MINUS;
precedence right NOT;
precedence left TIMES, DIVIDE, MOD;
precedence left LSHIFT, RSHIFT;
precedence left AND, XOR, OR;
precedence left POW;

expr_list ::= expr_list expr_part | expr_part;
expr_part ::= expr:e {: System.out.println(" = "+e+";"); :} SEMI;
expr      ::= NUMBER:n
	      {: RESULT=n; :}
            | expr:l PLUS expr:r
	      {: RESULT=new Integer(l.intValue() + r.intValue()); :}
            | expr:l MINUS expr:r
	      {: RESULT=new Integer(l.intValue() - r.intValue()); :}
            | NOT expr:r
	      {: RESULT=new Integer(~ r.intValue()); :}
	    | expr:l TIMES expr:r
	      {: RESULT=new Integer(l.intValue() * r.intValue()); :}
	    | expr:l DIVIDE expr:r
	      {: RESULT=new Integer(l.intValue() / r.intValue()); :}
	    | expr:l MOD expr:r
	      {: RESULT=new Integer(l.intValue() % r.intValue()); :}
	    | expr:l LSHIFT expr:r
	      {: RESULT=new Integer(l.intValue() << r.intValue()); :}
	    | expr:l RSHIFT expr:r
	      {: RESULT=new Integer(l.intValue() >> r.intValue()); :}
	    | expr:l AND expr:r
	      {: RESULT=new Integer(l.intValue() & r.intValue()); :}
	    | expr:l XOR expr:r
	      {: RESULT=new Integer(l.intValue() ^ r.intValue()); :}
	    | expr:l OR expr:r
	      {: RESULT=new Integer(l.intValue() | r.intValue()); :}
	    | expr:l POW expr:r
	      {: RESULT=new Integer((int)Math.pow(l.intValue(),r.intValue())); :}
	    | LPAREN expr:e RPAREN
	      {: RESULT=e; :}
	    ;
